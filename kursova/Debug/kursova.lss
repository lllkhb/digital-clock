
kursova.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000616  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000616  000006aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800078  00800078  000006c2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000151  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000045f  00000000  00000000  00000f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001e9  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000643  00000000  00000000  000015d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b6  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000003b  00000000  00000000  00001e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00001ecd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 39       	cpi	r26, 0x91	; 145
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 02 	call	0x588	; 0x588 <main>
  8a:	0c 94 09 03 	jmp	0x612	; 0x612 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <led>:
        digits[0] = time_val[2] / 10;
    }
}

void led(){
		PORTB |= (1 << PB7);
  92:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f e5       	ldi	r24, 0x5F	; 95
  96:	9a ee       	ldi	r25, 0xEA	; 234
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	81 50       	subi	r24, 0x01	; 1
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	a0 40       	sbci	r26, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <led+0x8>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <led+0x12>
  a4:	00 00       	nop
			_delay_ms(300);
			PORTB &= ~(1 << PB7);
  a6:	c7 98       	cbi	0x18, 7	; 24
  a8:	8f e5       	ldi	r24, 0x5F	; 95
  aa:	9a ee       	ldi	r25, 0xEA	; 234
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	a0 40       	sbci	r26, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <led+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <led+0x26>
  b8:	00 00       	nop
			_delay_ms(300);
}
  ba:	08 95       	ret

000000bc <timer1_init_ctc>:
    0b01111111, // 8
    0b01101111  // 9
};

void timer1_init_ctc() {
    TCNT1 = 0;
  bc:	1d bc       	out	0x2d, r1	; 45
  be:	1c bc       	out	0x2c, r1	; 44
    OCR1A = 15625; // 1Hz
  c0:	89 e0       	ldi	r24, 0x09	; 9
  c2:	9d e3       	ldi	r25, 0x3D	; 61
  c4:	9b bd       	out	0x2b, r25	; 43
  c6:	8a bd       	out	0x2a, r24	; 42
    TCCR1A = 0;
  c8:	1f bc       	out	0x2f, r1	; 47
    TCCR1A |= (1 << FOC1A);
  ca:	8f b5       	in	r24, 0x2f	; 47
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM12);
  d0:	8e b5       	in	r24, 0x2e	; 46
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	8e bd       	out	0x2e, r24	; 46
    TCCR1B |= (1 << CS11) | (1 << CS10); // prescaler 64
  d6:	8e b5       	in	r24, 0x2e	; 46
  d8:	83 60       	ori	r24, 0x03	; 3
  da:	8e bd       	out	0x2e, r24	; 46
    TIMSK |= (1 << OCIE1A);
  dc:	89 b7       	in	r24, 0x39	; 57
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	89 bf       	out	0x39, r24	; 57
    sei();
  e2:	78 94       	sei
}
  e4:	08 95       	ret

000000e6 <__vector_6>:



ISR(TIMER1_COMPA_vect) {
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
    if (start == 1) {
 110:	80 91 8c 00 	lds	r24, 0x008C
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	09 f0       	breq	.+2      	; 0x11a <__vector_6+0x34>
 118:	56 c0       	rjmp	.+172    	; 0x1c6 <__vector_6+0xe0>
        time_val[0]++;
 11a:	80 91 78 00 	lds	r24, 0x0078
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 93 78 00 	sts	0x0078, r24
        if (time_val[0] == 60) {
 124:	8c 33       	cpi	r24, 0x3C	; 60
 126:	39 f4       	brne	.+14     	; 0x136 <__vector_6+0x50>
            time_val[0] = 0;
 128:	10 92 78 00 	sts	0x0078, r1
            time_val[1]++;
 12c:	80 91 79 00 	lds	r24, 0x0079
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 79 00 	sts	0x0079, r24
        }
        if (time_val[1] == 60) {
 136:	80 91 79 00 	lds	r24, 0x0079
 13a:	8c 33       	cpi	r24, 0x3C	; 60
 13c:	b1 f4       	brne	.+44     	; 0x16a <__vector_6+0x84>
            time_val[1] = 0;
 13e:	10 92 79 00 	sts	0x0079, r1
            time_val[2]++;	
 142:	80 91 7a 00 	lds	r24, 0x007A
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 7a 00 	sts	0x007A, r24
			for(int i=0; i<time_val[2]; i++){
 14c:	88 23       	and	r24, r24
 14e:	69 f0       	breq	.+26     	; 0x16a <__vector_6+0x84>
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	0a e7       	ldi	r16, 0x7A	; 122
 156:	10 e0       	ldi	r17, 0x00	; 0
			led();	
 158:	0e 94 49 00 	call	0x92	; 0x92 <led>
            time_val[1]++;
        }
        if (time_val[1] == 60) {
            time_val[1] = 0;
            time_val[2]++;	
			for(int i=0; i<time_val[2]; i++){
 15c:	21 96       	adiw	r28, 0x01	; 1
 15e:	f8 01       	movw	r30, r16
 160:	80 81       	ld	r24, Z
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	c8 17       	cp	r28, r24
 166:	d9 07       	cpc	r29, r25
 168:	bc f3       	brlt	.-18     	; 0x158 <__vector_6+0x72>
			led();	
			}			
        }
        if (time_val[2] == 24) {
 16a:	80 91 7a 00 	lds	r24, 0x007A
 16e:	88 31       	cpi	r24, 0x18	; 24
 170:	11 f4       	brne	.+4      	; 0x176 <__vector_6+0x90>
            time_val[2] = 0;
 172:	10 92 7a 00 	sts	0x007A, r1
        }
        digits[5] = time_val[0] % 10;
 176:	80 91 78 00 	lds	r24, 0x0078
 17a:	25 e8       	ldi	r18, 0x85	; 133
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	4a e0       	ldi	r20, 0x0A	; 10
 180:	64 2f       	mov	r22, r20
 182:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodqi4>
 186:	90 93 85 00 	sts	0x0085, r25
 18a:	10 92 86 00 	sts	0x0086, r1
        digits[4] = time_val[0] / 10;
 18e:	f9 01       	movw	r30, r18
 190:	32 97       	sbiw	r30, 0x02	; 2
 192:	80 83       	st	Z, r24
 194:	11 82       	std	Z+1, r1	; 0x01
        digits[3] = time_val[1] % 10;
 196:	80 91 79 00 	lds	r24, 0x0079
 19a:	f9 01       	movw	r30, r18
 19c:	34 97       	sbiw	r30, 0x04	; 4
 19e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodqi4>
 1a2:	90 83       	st	Z, r25
 1a4:	11 82       	std	Z+1, r1	; 0x01
        digits[2] = time_val[1] / 10;
 1a6:	f9 01       	movw	r30, r18
 1a8:	36 97       	sbiw	r30, 0x06	; 6
 1aa:	80 83       	st	Z, r24
 1ac:	11 82       	std	Z+1, r1	; 0x01
        digits[1] = time_val[2] % 10;
 1ae:	80 91 7a 00 	lds	r24, 0x007A
 1b2:	f9 01       	movw	r30, r18
 1b4:	38 97       	sbiw	r30, 0x08	; 8
 1b6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodqi4>
 1ba:	90 83       	st	Z, r25
 1bc:	11 82       	std	Z+1, r1	; 0x01
        digits[0] = time_val[2] / 10;
 1be:	f9 01       	movw	r30, r18
 1c0:	3a 97       	sbiw	r30, 0x0a	; 10
 1c2:	80 83       	st	Z, r24
 1c4:	11 82       	std	Z+1, r1	; 0x01
    }
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <adc_init>:
			PORTB &= ~(1 << PB7);
			_delay_ms(300);
}

void adc_init() {
    ADMUX |= (1 << REFS0) | (1 << MUX0) | (1 << MUX1) | (1 << MUX2);           
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	87 64       	ori	r24, 0x47	; 71
 1f4:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1 << ADEN) | (1 << ADIE); 
 1f6:	86 b1       	in	r24, 0x06	; 6
 1f8:	88 68       	ori	r24, 0x88	; 136
 1fa:	86 b9       	out	0x06, r24	; 6
    SFIOR |= (1 << ADTS1) | (1 << ADTS0);
 1fc:	80 b7       	in	r24, 0x30	; 48
 1fe:	80 66       	ori	r24, 0x60	; 96
 200:	80 bf       	out	0x30, r24	; 48
    sei();
 202:	78 94       	sei
}
 204:	08 95       	ret

00000206 <button>:

void button() {
    switch (button_number) {
 206:	80 91 89 00 	lds	r24, 0x0089
 20a:	90 91 8a 00 	lds	r25, 0x008A
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	91 05       	cpc	r25, r1
 212:	09 f4       	brne	.+2      	; 0x216 <button+0x10>
 214:	70 c0       	rjmp	.+224    	; 0x2f6 <button+0xf0>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	91 05       	cpc	r25, r1
 21a:	3c f4       	brge	.+14     	; 0x22a <button+0x24>
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	71 f0       	breq	.+28     	; 0x23c <button+0x36>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	91 05       	cpc	r25, r1
 224:	09 f0       	breq	.+2      	; 0x228 <button+0x22>
 226:	d2 c0       	rjmp	.+420    	; 0x3cc <button+0x1c6>
 228:	11 c0       	rjmp	.+34     	; 0x24c <button+0x46>
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	91 05       	cpc	r25, r1
 22e:	09 f4       	brne	.+2      	; 0x232 <button+0x2c>
 230:	ab c0       	rjmp	.+342    	; 0x388 <button+0x182>
 232:	84 30       	cpi	r24, 0x04	; 4
 234:	91 05       	cpc	r25, r1
 236:	09 f0       	breq	.+2      	; 0x23a <button+0x34>
 238:	c9 c0       	rjmp	.+402    	; 0x3cc <button+0x1c6>
 23a:	bb c0       	rjmp	.+374    	; 0x3b2 <button+0x1ac>
        case 0: // нічого
            if (off == 1) {
 23c:	80 91 8d 00 	lds	r24, 0x008D
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	09 f0       	breq	.+2      	; 0x246 <button+0x40>
 244:	c3 c0       	rjmp	.+390    	; 0x3cc <button+0x1c6>
                PORTC = 0b00000000;
 246:	15 ba       	out	0x15, r1	; 21
                PORTA = 0b00000000;
 248:	1b ba       	out	0x1b, r1	; 27
 24a:	08 95       	ret
            }
            break;

        case 1: // встановлення годин/хвилин/секунд
            if (setting) {
 24c:	80 91 62 00 	lds	r24, 0x0062
 250:	88 23       	and	r24, r24
 252:	09 f4       	brne	.+2      	; 0x256 <button+0x50>
 254:	bb c0       	rjmp	.+374    	; 0x3cc <button+0x1c6>
                counter++;
 256:	90 91 8b 00 	lds	r25, 0x008B
 25a:	9f 5f       	subi	r25, 0xFF	; 255
 25c:	90 93 8b 00 	sts	0x008B, r25
                if (setting_phase == 0) { // години
 260:	80 91 90 00 	lds	r24, 0x0090
 264:	88 23       	and	r24, r24
 266:	49 f4       	brne	.+18     	; 0x27a <button+0x74>
                    if (counter > 23) counter = 0;
 268:	98 31       	cpi	r25, 0x18	; 24
 26a:	10 f0       	brcs	.+4      	; 0x270 <button+0x6a>
 26c:	10 92 8b 00 	sts	0x008B, r1
                    time_val[2] = counter;
 270:	80 91 8b 00 	lds	r24, 0x008B
 274:	80 93 7a 00 	sts	0x007A, r24
 278:	15 c0       	rjmp	.+42     	; 0x2a4 <button+0x9e>
                } else if (setting_phase == 1) { // хвилини
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	49 f4       	brne	.+18     	; 0x290 <button+0x8a>
                    if (counter > 59) counter = 0;
 27e:	9c 33       	cpi	r25, 0x3C	; 60
 280:	10 f0       	brcs	.+4      	; 0x286 <button+0x80>
 282:	10 92 8b 00 	sts	0x008B, r1
                    time_val[1] = counter;
 286:	80 91 8b 00 	lds	r24, 0x008B
 28a:	80 93 79 00 	sts	0x0079, r24
 28e:	0a c0       	rjmp	.+20     	; 0x2a4 <button+0x9e>
                } else if (setting_phase == 2) { // секунди
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	41 f4       	brne	.+16     	; 0x2a4 <button+0x9e>
                    if (counter > 59) counter = 0;
 294:	9c 33       	cpi	r25, 0x3C	; 60
 296:	10 f0       	brcs	.+4      	; 0x29c <button+0x96>
 298:	10 92 8b 00 	sts	0x008B, r1
                    time_val[0] = counter;
 29c:	80 91 8b 00 	lds	r24, 0x008B
 2a0:	80 93 78 00 	sts	0x0078, r24
                }

                digits[5] = time_val[0] % 10;
 2a4:	80 91 78 00 	lds	r24, 0x0078
 2a8:	25 e8       	ldi	r18, 0x85	; 133
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	4a e0       	ldi	r20, 0x0A	; 10
 2ae:	64 2f       	mov	r22, r20
 2b0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodqi4>
 2b4:	90 93 85 00 	sts	0x0085, r25
 2b8:	10 92 86 00 	sts	0x0086, r1
                digits[4] = time_val[0] / 10;
 2bc:	f9 01       	movw	r30, r18
 2be:	32 97       	sbiw	r30, 0x02	; 2
 2c0:	80 83       	st	Z, r24
 2c2:	11 82       	std	Z+1, r1	; 0x01
                digits[3] = time_val[1] % 10;
 2c4:	80 91 79 00 	lds	r24, 0x0079
 2c8:	f9 01       	movw	r30, r18
 2ca:	34 97       	sbiw	r30, 0x04	; 4
 2cc:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodqi4>
 2d0:	90 83       	st	Z, r25
 2d2:	11 82       	std	Z+1, r1	; 0x01
                digits[2] = time_val[1] / 10;
 2d4:	f9 01       	movw	r30, r18
 2d6:	36 97       	sbiw	r30, 0x06	; 6
 2d8:	80 83       	st	Z, r24
 2da:	11 82       	std	Z+1, r1	; 0x01
                digits[1] = time_val[2] % 10;
 2dc:	80 91 7a 00 	lds	r24, 0x007A
 2e0:	f9 01       	movw	r30, r18
 2e2:	38 97       	sbiw	r30, 0x08	; 8
 2e4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodqi4>
 2e8:	90 83       	st	Z, r25
 2ea:	11 82       	std	Z+1, r1	; 0x01
                digits[0] = time_val[2] / 10;
 2ec:	f9 01       	movw	r30, r18
 2ee:	3a 97       	sbiw	r30, 0x0a	; 10
 2f0:	80 83       	st	Z, r24
 2f2:	11 82       	std	Z+1, r1	; 0x01
 2f4:	08 95       	ret
            }
		
            break;

        case 2: // запуск секундоміра
			s++;
 2f6:	20 91 8e 00 	lds	r18, 0x008E
 2fa:	30 91 8f 00 	lds	r19, 0x008F
 2fe:	2f 5f       	subi	r18, 0xFF	; 255
 300:	3f 4f       	sbci	r19, 0xFF	; 255
 302:	30 93 8f 00 	sts	0x008F, r19
 306:	20 93 8e 00 	sts	0x008E, r18
			if(s%2 == 1){
 30a:	c9 01       	movw	r24, r18
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__divmodhi4>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	91 05       	cpc	r25, r1
 318:	51 f4       	brne	.+20     	; 0x32e <button+0x128>
            time_val[0] = time_val[1] = time_val[2] = 0;
 31a:	10 92 7a 00 	sts	0x007A, r1
 31e:	10 92 79 00 	sts	0x0079, r1
 322:	10 92 78 00 	sts	0x0078, r1
            start = 1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 93 8c 00 	sts	0x008C, r24
 32c:	08 95       	ret
			} else if (s%2 == 0){
 32e:	20 fd       	sbrc	r18, 0
 330:	4d c0       	rjmp	.+154    	; 0x3cc <button+0x1c6>
				start = 0;
 332:	10 92 8c 00 	sts	0x008C, r1
			 digits[5] = time_val[0] % 10;
 336:	80 91 78 00 	lds	r24, 0x0078
 33a:	25 e8       	ldi	r18, 0x85	; 133
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	4a e0       	ldi	r20, 0x0A	; 10
 340:	64 2f       	mov	r22, r20
 342:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodqi4>
 346:	90 93 85 00 	sts	0x0085, r25
 34a:	10 92 86 00 	sts	0x0086, r1
			digits[4] = time_val[0] / 10;
 34e:	f9 01       	movw	r30, r18
 350:	32 97       	sbiw	r30, 0x02	; 2
 352:	80 83       	st	Z, r24
 354:	11 82       	std	Z+1, r1	; 0x01
			digits[3] = time_val[1] % 10;
 356:	80 91 79 00 	lds	r24, 0x0079
 35a:	f9 01       	movw	r30, r18
 35c:	34 97       	sbiw	r30, 0x04	; 4
 35e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodqi4>
 362:	90 83       	st	Z, r25
 364:	11 82       	std	Z+1, r1	; 0x01
			digits[2] = time_val[1] / 10;
 366:	f9 01       	movw	r30, r18
 368:	36 97       	sbiw	r30, 0x06	; 6
 36a:	80 83       	st	Z, r24
 36c:	11 82       	std	Z+1, r1	; 0x01
			digits[1] = time_val[2] % 10;
 36e:	80 91 7a 00 	lds	r24, 0x007A
 372:	f9 01       	movw	r30, r18
 374:	38 97       	sbiw	r30, 0x08	; 8
 376:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodqi4>
 37a:	90 83       	st	Z, r25
 37c:	11 82       	std	Z+1, r1	; 0x01
			digits[0] = time_val[2] / 10;
 37e:	f9 01       	movw	r30, r18
 380:	3a 97       	sbiw	r30, 0x0a	; 10
 382:	80 83       	st	Z, r24
 384:	11 82       	std	Z+1, r1	; 0x01
 386:	08 95       	ret

			}						
            break;

        case 3: // фіксація та перехід до наступного етапу
            if (setting) {
 388:	80 91 62 00 	lds	r24, 0x0062
 38c:	88 23       	and	r24, r24
 38e:	f1 f0       	breq	.+60     	; 0x3cc <button+0x1c6>
                setting_phase++;
 390:	80 91 90 00 	lds	r24, 0x0090
 394:	8f 5f       	subi	r24, 0xFF	; 255
 396:	80 93 90 00 	sts	0x0090, r24
                counter = 0;
 39a:	10 92 8b 00 	sts	0x008B, r1
                if (setting_phase > 2) {
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	a8 f0       	brcs	.+42     	; 0x3cc <button+0x1c6>
                    setting = 0;
 3a2:	10 92 62 00 	sts	0x0062, r1
                    setting_phase = 0;
 3a6:	10 92 90 00 	sts	0x0090, r1
                    start = 1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	80 93 8c 00 	sts	0x008C, r24
 3b0:	08 95       	ret
            }
			
            break;

        case 4: // вимикання/вмикання
            off++;
 3b2:	80 91 8d 00 	lds	r24, 0x008D
 3b6:	8f 5f       	subi	r24, 0xFF	; 255
            if (off % 2 == 1) {
 3b8:	80 ff       	sbrs	r24, 0
 3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <button+0x1c2>
                PORTC = 0b00000000;
 3bc:	15 ba       	out	0x15, r1	; 21
                PORTA = 0b00000000;
 3be:	1b ba       	out	0x1b, r1	; 27
                off = 1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 8d 00 	sts	0x008D, r24
 3c6:	08 95       	ret
            } else {
                off = 0;
 3c8:	10 92 8d 00 	sts	0x008D, r1
 3cc:	08 95       	ret

000003ce <__vector_14>:
            }
            break;
    }
}

ISR(ADC_vect) {
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	6f 93       	push	r22
 3e2:	7f 93       	push	r23
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	af 93       	push	r26
 3ea:	bf 93       	push	r27
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
    result = ADC; 
 3f0:	84 b1       	in	r24, 0x04	; 4
 3f2:	95 b1       	in	r25, 0x05	; 5
 3f4:	90 93 61 00 	sts	0x0061, r25
 3f8:	80 93 60 00 	sts	0x0060, r24
    int old_button = button_number;
 3fc:	20 91 89 00 	lds	r18, 0x0089
 400:	30 91 8a 00 	lds	r19, 0x008A

    if (result == 819)
 404:	43 e0       	ldi	r20, 0x03	; 3
 406:	83 33       	cpi	r24, 0x33	; 51
 408:	94 07       	cpc	r25, r20
 40a:	29 f4       	brne	.+10     	; 0x416 <__vector_14+0x48>
        button_number = 0;
 40c:	10 92 8a 00 	sts	0x008A, r1
 410:	10 92 89 00 	sts	0x0089, r1
 414:	30 c0       	rjmp	.+96     	; 0x476 <__stack+0x17>
    else if (result == 0)
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	39 f4       	brne	.+14     	; 0x428 <__vector_14+0x5a>
        button_number = 1;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	90 93 8a 00 	sts	0x008A, r25
 422:	80 93 89 00 	sts	0x0089, r24
 426:	27 c0       	rjmp	.+78     	; 0x476 <__stack+0x17>
    else if (result == 512)
 428:	42 e0       	ldi	r20, 0x02	; 2
 42a:	80 30       	cpi	r24, 0x00	; 0
 42c:	94 07       	cpc	r25, r20
 42e:	39 f4       	brne	.+14     	; 0x43e <__vector_14+0x70>
        button_number = 2;    
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	90 93 8a 00 	sts	0x008A, r25
 438:	80 93 89 00 	sts	0x0089, r24
 43c:	1c c0       	rjmp	.+56     	; 0x476 <__stack+0x17>
    else if (result == 683)
 43e:	42 e0       	ldi	r20, 0x02	; 2
 440:	8b 3a       	cpi	r24, 0xAB	; 171
 442:	94 07       	cpc	r25, r20
 444:	39 f4       	brne	.+14     	; 0x454 <__vector_14+0x86>
        button_number = 3;
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	90 93 8a 00 	sts	0x008A, r25
 44e:	80 93 89 00 	sts	0x0089, r24
 452:	11 c0       	rjmp	.+34     	; 0x476 <__stack+0x17>
    else if (result == 768)
 454:	43 e0       	ldi	r20, 0x03	; 3
 456:	80 30       	cpi	r24, 0x00	; 0
 458:	94 07       	cpc	r25, r20
 45a:	39 f4       	brne	.+14     	; 0x46a <__stack+0xb>
        button_number = 4;
 45c:	84 e0       	ldi	r24, 0x04	; 4
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	90 93 8a 00 	sts	0x008A, r25
 464:	80 93 89 00 	sts	0x0089, r24
 468:	06 c0       	rjmp	.+12     	; 0x476 <__stack+0x17>
    else
        button_number = -1;
 46a:	8f ef       	ldi	r24, 0xFF	; 255
 46c:	9f ef       	ldi	r25, 0xFF	; 255
 46e:	90 93 8a 00 	sts	0x008A, r25
 472:	80 93 89 00 	sts	0x0089, r24
	
    if (button_number != old_button && button_number != -1) {
 476:	80 91 89 00 	lds	r24, 0x0089
 47a:	90 91 8a 00 	lds	r25, 0x008A
 47e:	82 17       	cp	r24, r18
 480:	93 07       	cpc	r25, r19
 482:	51 f0       	breq	.+20     	; 0x498 <__stack+0x39>
 484:	2f ef       	ldi	r18, 0xFF	; 255
 486:	8f 3f       	cpi	r24, 0xFF	; 255
 488:	92 07       	cpc	r25, r18
 48a:	31 f0       	breq	.+12     	; 0x498 <__stack+0x39>
        button();
 48c:	0e 94 03 01 	call	0x206	; 0x206 <button>
		result = 0;
 490:	10 92 61 00 	sts	0x0061, r1
 494:	10 92 60 00 	sts	0x0060, r1
        for (int i = 0; buf[i] != '\0'; i++) {
            UART_send(buf[i]);
        }
        UART_send('\n');  // Перехід на новий рядок для зручності
    */
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <timer0_init_ctc>:

void timer0_init_ctc() {
    TCCR0 |= (1 << WGM01);          
 4ba:	83 b7       	in	r24, 0x33	; 51
 4bc:	88 60       	ori	r24, 0x08	; 8
 4be:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1 << CS02);           
 4c0:	83 b7       	in	r24, 0x33	; 51
 4c2:	84 60       	ori	r24, 0x04	; 4
 4c4:	83 bf       	out	0x33, r24	; 51
    OCR0 = 12;                  
 4c6:	8c e0       	ldi	r24, 0x0C	; 12
 4c8:	8c bf       	out	0x3c, r24	; 60
    TIMSK |= (1 << OCIE0); 
 4ca:	89 b7       	in	r24, 0x39	; 57
 4cc:	82 60       	ori	r24, 0x02	; 2
 4ce:	89 bf       	out	0x39, r24	; 57
}
 4d0:	08 95       	ret

000004d2 <timer2_init_ctc>:

void timer2_init_ctc() {
    TCCR2 = 0;
 4d2:	15 bc       	out	0x25, r1	; 37
    TCCR2 |= (1 << WGM21); // CTC
 4d4:	85 b5       	in	r24, 0x25	; 37
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	85 bd       	out	0x25, r24	; 37
    OCR2 = 12; 
 4da:	8c e0       	ldi	r24, 0x0C	; 12
 4dc:	83 bd       	out	0x23, r24	; 35
    TIMSK |= (1 << OCIE2);
 4de:	89 b7       	in	r24, 0x39	; 57
 4e0:	80 68       	ori	r24, 0x80	; 128
 4e2:	89 bf       	out	0x39, r24	; 57
    TCCR2 |= (1 << CS22) | (1 << CS21);
 4e4:	85 b5       	in	r24, 0x25	; 37
 4e6:	86 60       	ori	r24, 0x06	; 6
 4e8:	85 bd       	out	0x25, r24	; 37
}
 4ea:	08 95       	ret

000004ec <__vector_19>:

ISR(TIMER0_COMP_vect) {
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
    ADCSRA |= (1 << ADSC);
 4f6:	36 9a       	sbi	0x06, 6	; 6
}
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <__vector_3>:

ISR(TIMER2_COMP_vect) {
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	2f 93       	push	r18
 50e:	3f 93       	push	r19
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	ef 93       	push	r30
 516:	ff 93       	push	r31
	if(off == 0){
 518:	80 91 8d 00 	lds	r24, 0x008D
 51c:	88 23       	and	r24, r24
 51e:	49 f5       	brne	.+82     	; 0x572 <__vector_3+0x70>
    PORTA = 0x00;
 520:	1b ba       	out	0x1b, r1	; 27
    PORTC = digit_segments[digits[current_digit]];
 522:	80 91 87 00 	lds	r24, 0x0087
 526:	90 91 88 00 	lds	r25, 0x0088
 52a:	fc 01       	movw	r30, r24
 52c:	ee 0f       	add	r30, r30
 52e:	ff 1f       	adc	r31, r31
 530:	e5 58       	subi	r30, 0x85	; 133
 532:	ff 4f       	sbci	r31, 0xFF	; 255
 534:	01 90       	ld	r0, Z+
 536:	f0 81       	ld	r31, Z
 538:	e0 2d       	mov	r30, r0
 53a:	ee 0f       	add	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	ed 59       	subi	r30, 0x9D	; 157
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	20 81       	ld	r18, Z
 544:	25 bb       	out	0x15, r18	; 21
    PORTA = (1 << current_digit);
 546:	21 e0       	ldi	r18, 0x01	; 1
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	00 90 87 00 	lds	r0, 0x0087
 54e:	02 c0       	rjmp	.+4      	; 0x554 <__vector_3+0x52>
 550:	22 0f       	add	r18, r18
 552:	33 1f       	adc	r19, r19
 554:	0a 94       	dec	r0
 556:	e2 f7       	brpl	.-8      	; 0x550 <__vector_3+0x4e>
 558:	2b bb       	out	0x1b, r18	; 27
    current_digit++;
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	90 93 88 00 	sts	0x0088, r25
 560:	80 93 87 00 	sts	0x0087, r24
    if (current_digit >= 6) current_digit = 0;
 564:	86 30       	cpi	r24, 0x06	; 6
 566:	91 05       	cpc	r25, r1
 568:	24 f0       	brlt	.+8      	; 0x572 <__vector_3+0x70>
 56a:	10 92 88 00 	sts	0x0088, r1
 56e:	10 92 87 00 	sts	0x0087, r1
	}	
	
}
 572:	ff 91       	pop	r31
 574:	ef 91       	pop	r30
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <main>:

int main() {
    DDRC = 0b11111111;
 588:	8f ef       	ldi	r24, 0xFF	; 255
 58a:	84 bb       	out	0x14, r24	; 20
    DDRA = 0b00111111;
 58c:	8f e3       	ldi	r24, 0x3F	; 63
 58e:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0b10000000;
 590:	80 e8       	ldi	r24, 0x80	; 128
 592:	87 bb       	out	0x17, r24	; 23
    PORTC = 0b00000000;
 594:	15 ba       	out	0x15, r1	; 21
    PORTA = 0b00000000;
 596:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0b00000000;
 598:	18 ba       	out	0x18, r1	; 24
	//UART_Init();
    timer1_init_ctc(); 
 59a:	0e 94 5e 00 	call	0xbc	; 0xbc <timer1_init_ctc>
    timer0_init_ctc(); 
 59e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <timer0_init_ctc>
    timer2_init_ctc(); 
 5a2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <timer2_init_ctc>
    adc_init();
 5a6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <adc_init>
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <main+0x22>

000005ac <__udivmodqi4>:
 5ac:	99 1b       	sub	r25, r25
 5ae:	79 e0       	ldi	r23, 0x09	; 9
 5b0:	04 c0       	rjmp	.+8      	; 0x5ba <__udivmodqi4_ep>

000005b2 <__udivmodqi4_loop>:
 5b2:	99 1f       	adc	r25, r25
 5b4:	96 17       	cp	r25, r22
 5b6:	08 f0       	brcs	.+2      	; 0x5ba <__udivmodqi4_ep>
 5b8:	96 1b       	sub	r25, r22

000005ba <__udivmodqi4_ep>:
 5ba:	88 1f       	adc	r24, r24
 5bc:	7a 95       	dec	r23
 5be:	c9 f7       	brne	.-14     	; 0x5b2 <__udivmodqi4_loop>
 5c0:	80 95       	com	r24
 5c2:	08 95       	ret

000005c4 <__divmodhi4>:
 5c4:	97 fb       	bst	r25, 7
 5c6:	09 2e       	mov	r0, r25
 5c8:	07 26       	eor	r0, r23
 5ca:	0a d0       	rcall	.+20     	; 0x5e0 <__divmodhi4_neg1>
 5cc:	77 fd       	sbrc	r23, 7
 5ce:	04 d0       	rcall	.+8      	; 0x5d8 <__divmodhi4_neg2>
 5d0:	0c d0       	rcall	.+24     	; 0x5ea <__udivmodhi4>
 5d2:	06 d0       	rcall	.+12     	; 0x5e0 <__divmodhi4_neg1>
 5d4:	00 20       	and	r0, r0
 5d6:	1a f4       	brpl	.+6      	; 0x5de <__divmodhi4_exit>

000005d8 <__divmodhi4_neg2>:
 5d8:	70 95       	com	r23
 5da:	61 95       	neg	r22
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255

000005de <__divmodhi4_exit>:
 5de:	08 95       	ret

000005e0 <__divmodhi4_neg1>:
 5e0:	f6 f7       	brtc	.-4      	; 0x5de <__divmodhi4_exit>
 5e2:	90 95       	com	r25
 5e4:	81 95       	neg	r24
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	08 95       	ret

000005ea <__udivmodhi4>:
 5ea:	aa 1b       	sub	r26, r26
 5ec:	bb 1b       	sub	r27, r27
 5ee:	51 e1       	ldi	r21, 0x11	; 17
 5f0:	07 c0       	rjmp	.+14     	; 0x600 <__udivmodhi4_ep>

000005f2 <__udivmodhi4_loop>:
 5f2:	aa 1f       	adc	r26, r26
 5f4:	bb 1f       	adc	r27, r27
 5f6:	a6 17       	cp	r26, r22
 5f8:	b7 07       	cpc	r27, r23
 5fa:	10 f0       	brcs	.+4      	; 0x600 <__udivmodhi4_ep>
 5fc:	a6 1b       	sub	r26, r22
 5fe:	b7 0b       	sbc	r27, r23

00000600 <__udivmodhi4_ep>:
 600:	88 1f       	adc	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	5a 95       	dec	r21
 606:	a9 f7       	brne	.-22     	; 0x5f2 <__udivmodhi4_loop>
 608:	80 95       	com	r24
 60a:	90 95       	com	r25
 60c:	bc 01       	movw	r22, r24
 60e:	cd 01       	movw	r24, r26
 610:	08 95       	ret

00000612 <_exit>:
 612:	f8 94       	cli

00000614 <__stop_program>:
 614:	ff cf       	rjmp	.-2      	; 0x614 <__stop_program>
