
kursova.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000004ea  0000057e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800076  00800076  00000594  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000138  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002e9  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000010a  00000000  00000000  00001131  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000512  00000000  00000000  0000123b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  00001750  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000159  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000079  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  000019d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 38       	cpi	r26, 0x8D	; 141
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 56 02 	call	0x4ac	; 0x4ac <main>
  8a:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <timer1_init_ctc>:
    0b01111111, // 8
    0b01101111  // 9
};

void timer1_init_ctc() {
    TCNT1 = 0;
  92:	1d bc       	out	0x2d, r1	; 45
  94:	1c bc       	out	0x2c, r1	; 44
    OCR1A = 15625; // 1Hz
  96:	89 e0       	ldi	r24, 0x09	; 9
  98:	9d e3       	ldi	r25, 0x3D	; 61
  9a:	9b bd       	out	0x2b, r25	; 43
  9c:	8a bd       	out	0x2a, r24	; 42
    TCCR1A = 0;
  9e:	1f bc       	out	0x2f, r1	; 47
    TCCR1A |= (1 << FOC1A);
  a0:	8f b5       	in	r24, 0x2f	; 47
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1 << WGM12);
  a6:	8e b5       	in	r24, 0x2e	; 46
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	8e bd       	out	0x2e, r24	; 46
    TCCR1B |= (1 << CS11) | (1 << CS10); // prescaler 64
  ac:	8e b5       	in	r24, 0x2e	; 46
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	8e bd       	out	0x2e, r24	; 46
    TIMSK |= (1 << OCIE1A);
  b2:	89 b7       	in	r24, 0x39	; 57
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	89 bf       	out	0x39, r24	; 57
    sei();
  b8:	78 94       	sei
}
  ba:	08 95       	ret

000000bc <__vector_6>:

ISR(TIMER1_COMPA_vect) {
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
    if (start == 1) {
  d8:	80 91 8a 00 	lds	r24, 0x008A
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	09 f0       	breq	.+2      	; 0xe2 <__vector_6+0x26>
  e0:	47 c0       	rjmp	.+142    	; 0x170 <__vector_6+0xb4>
        time_val[0]++;
  e2:	80 91 76 00 	lds	r24, 0x0076
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 76 00 	sts	0x0076, r24
        if (time_val[0] == 60) {
  ec:	8c 33       	cpi	r24, 0x3C	; 60
  ee:	39 f4       	brne	.+14     	; 0xfe <__vector_6+0x42>
            time_val[0] = 0;
  f0:	10 92 76 00 	sts	0x0076, r1
            time_val[1]++;
  f4:	80 91 77 00 	lds	r24, 0x0077
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 77 00 	sts	0x0077, r24
        }
        if (time_val[1] == 60) {
  fe:	80 91 77 00 	lds	r24, 0x0077
 102:	8c 33       	cpi	r24, 0x3C	; 60
 104:	39 f4       	brne	.+14     	; 0x114 <__vector_6+0x58>
            time_val[1] = 0;
 106:	10 92 77 00 	sts	0x0077, r1
            time_val[2]++;
 10a:	80 91 78 00 	lds	r24, 0x0078
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 78 00 	sts	0x0078, r24
        }
        if (time_val[2] == 24) {
 114:	80 91 78 00 	lds	r24, 0x0078
 118:	88 31       	cpi	r24, 0x18	; 24
 11a:	11 f4       	brne	.+4      	; 0x120 <__vector_6+0x64>
            time_val[2] = 0;
 11c:	10 92 78 00 	sts	0x0078, r1
        }
        digits[5] = time_val[0] % 10;
 120:	80 91 76 00 	lds	r24, 0x0076
 124:	23 e8       	ldi	r18, 0x83	; 131
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	4a e0       	ldi	r20, 0x0A	; 10
 12a:	64 2f       	mov	r22, r20
 12c:	0e 94 67 02 	call	0x4ce	; 0x4ce <__udivmodqi4>
 130:	90 93 83 00 	sts	0x0083, r25
 134:	10 92 84 00 	sts	0x0084, r1
        digits[4] = time_val[0] / 10;
 138:	f9 01       	movw	r30, r18
 13a:	32 97       	sbiw	r30, 0x02	; 2
 13c:	80 83       	st	Z, r24
 13e:	11 82       	std	Z+1, r1	; 0x01
        digits[3] = time_val[1] % 10;
 140:	80 91 77 00 	lds	r24, 0x0077
 144:	f9 01       	movw	r30, r18
 146:	34 97       	sbiw	r30, 0x04	; 4
 148:	0e 94 67 02 	call	0x4ce	; 0x4ce <__udivmodqi4>
 14c:	90 83       	st	Z, r25
 14e:	11 82       	std	Z+1, r1	; 0x01
        digits[2] = time_val[1] / 10;
 150:	f9 01       	movw	r30, r18
 152:	36 97       	sbiw	r30, 0x06	; 6
 154:	80 83       	st	Z, r24
 156:	11 82       	std	Z+1, r1	; 0x01
        digits[1] = time_val[2] % 10;
 158:	80 91 78 00 	lds	r24, 0x0078
 15c:	f9 01       	movw	r30, r18
 15e:	38 97       	sbiw	r30, 0x08	; 8
 160:	0e 94 67 02 	call	0x4ce	; 0x4ce <__udivmodqi4>
 164:	90 83       	st	Z, r25
 166:	11 82       	std	Z+1, r1	; 0x01
        digits[0] = time_val[2] / 10;
 168:	f9 01       	movw	r30, r18
 16a:	3a 97       	sbiw	r30, 0x0a	; 10
 16c:	80 83       	st	Z, r24
 16e:	11 82       	std	Z+1, r1	; 0x01
    }
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <adc_init>:

void adc_init() {
    ADMUX |= (1 << REFS0) | (1 << MUX0) | (1 << MUX1) | (1 << MUX2);           
 18c:	87 b1       	in	r24, 0x07	; 7
 18e:	87 64       	ori	r24, 0x47	; 71
 190:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1 << ADEN) | (1 << ADIE); 
 192:	86 b1       	in	r24, 0x06	; 6
 194:	88 68       	ori	r24, 0x88	; 136
 196:	86 b9       	out	0x06, r24	; 6
    SFIOR |= (1 << ADTS1) | (1 << ADTS0);
 198:	80 b7       	in	r24, 0x30	; 48
 19a:	80 66       	ori	r24, 0x60	; 96
 19c:	80 bf       	out	0x30, r24	; 48
    ADCSRA |= (1 << ADATE);
 19e:	35 9a       	sbi	0x06, 5	; 6
    sei();
 1a0:	78 94       	sei
}
 1a2:	08 95       	ret

000001a4 <button>:

void button() {
    switch (button_number) {
 1a4:	80 91 87 00 	lds	r24, 0x0087
 1a8:	90 91 88 00 	lds	r25, 0x0088
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	91 05       	cpc	r25, r1
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <button+0x10>
 1b2:	71 c0       	rjmp	.+226    	; 0x296 <button+0xf2>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	91 05       	cpc	r25, r1
 1b8:	3c f4       	brge	.+14     	; 0x1c8 <button+0x24>
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	71 f0       	breq	.+28     	; 0x1da <button+0x36>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	91 05       	cpc	r25, r1
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <button+0x22>
 1c4:	99 c0       	rjmp	.+306    	; 0x2f8 <button+0x154>
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <button+0x46>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	91 05       	cpc	r25, r1
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <button+0x2c>
 1ce:	6e c0       	rjmp	.+220    	; 0x2ac <button+0x108>
 1d0:	84 30       	cpi	r24, 0x04	; 4
 1d2:	91 05       	cpc	r25, r1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <button+0x34>
 1d6:	90 c0       	rjmp	.+288    	; 0x2f8 <button+0x154>
 1d8:	7f c0       	rjmp	.+254    	; 0x2d8 <button+0x134>
        case 0: // нічого
            if (off == 1) {
 1da:	80 91 8b 00 	lds	r24, 0x008B
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <button+0x40>
 1e2:	8a c0       	rjmp	.+276    	; 0x2f8 <button+0x154>
                PORTC = 0x00;
 1e4:	15 ba       	out	0x15, r1	; 21
                PORTA = 0x00;
 1e6:	1b ba       	out	0x1b, r1	; 27
 1e8:	08 95       	ret
            }
            break;

        case 1: // встановлення годин/хвилин/секунд
            if (setting) {
 1ea:	80 91 60 00 	lds	r24, 0x0060
 1ee:	88 23       	and	r24, r24
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <button+0x50>
 1f2:	82 c0       	rjmp	.+260    	; 0x2f8 <button+0x154>
                counter++;
 1f4:	90 91 89 00 	lds	r25, 0x0089
 1f8:	9f 5f       	subi	r25, 0xFF	; 255
 1fa:	90 93 89 00 	sts	0x0089, r25
                if (setting_phase == 0) { // години
 1fe:	80 91 8c 00 	lds	r24, 0x008C
 202:	88 23       	and	r24, r24
 204:	49 f4       	brne	.+18     	; 0x218 <button+0x74>
                    if (counter > 23) counter = 0;
 206:	98 31       	cpi	r25, 0x18	; 24
 208:	10 f0       	brcs	.+4      	; 0x20e <button+0x6a>
 20a:	10 92 89 00 	sts	0x0089, r1
                    time_val[2] = counter;
 20e:	80 91 89 00 	lds	r24, 0x0089
 212:	80 93 78 00 	sts	0x0078, r24
 216:	15 c0       	rjmp	.+42     	; 0x242 <button+0x9e>
                } else if (setting_phase == 1) { // хвилини
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	49 f4       	brne	.+18     	; 0x22e <button+0x8a>
                    if (counter > 59) counter = 0;
 21c:	9c 33       	cpi	r25, 0x3C	; 60
 21e:	10 f0       	brcs	.+4      	; 0x224 <button+0x80>
 220:	10 92 89 00 	sts	0x0089, r1
                    time_val[1] = counter;
 224:	80 91 89 00 	lds	r24, 0x0089
 228:	80 93 77 00 	sts	0x0077, r24
 22c:	0a c0       	rjmp	.+20     	; 0x242 <button+0x9e>
                } else if (setting_phase == 2) { // секунди
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	41 f4       	brne	.+16     	; 0x242 <button+0x9e>
                    if (counter > 59) counter = 0;
 232:	9c 33       	cpi	r25, 0x3C	; 60
 234:	10 f0       	brcs	.+4      	; 0x23a <button+0x96>
 236:	10 92 89 00 	sts	0x0089, r1
                    time_val[0] = counter;
 23a:	80 91 89 00 	lds	r24, 0x0089
 23e:	80 93 76 00 	sts	0x0076, r24
                }

                digits[5] = time_val[0] % 10;
 242:	80 91 76 00 	lds	r24, 0x0076
 246:	23 e8       	ldi	r18, 0x83	; 131
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	4a e0       	ldi	r20, 0x0A	; 10
 24c:	64 2f       	mov	r22, r20
 24e:	0e 94 67 02 	call	0x4ce	; 0x4ce <__udivmodqi4>
 252:	90 93 83 00 	sts	0x0083, r25
 256:	10 92 84 00 	sts	0x0084, r1
                digits[4] = time_val[0] / 10;
 25a:	f9 01       	movw	r30, r18
 25c:	32 97       	sbiw	r30, 0x02	; 2
 25e:	80 83       	st	Z, r24
 260:	11 82       	std	Z+1, r1	; 0x01
                digits[3] = time_val[1] % 10;
 262:	80 91 77 00 	lds	r24, 0x0077
 266:	f9 01       	movw	r30, r18
 268:	34 97       	sbiw	r30, 0x04	; 4
 26a:	0e 94 67 02 	call	0x4ce	; 0x4ce <__udivmodqi4>
 26e:	90 83       	st	Z, r25
 270:	11 82       	std	Z+1, r1	; 0x01
                digits[2] = time_val[1] / 10;
 272:	f9 01       	movw	r30, r18
 274:	36 97       	sbiw	r30, 0x06	; 6
 276:	80 83       	st	Z, r24
 278:	11 82       	std	Z+1, r1	; 0x01
                digits[1] = time_val[2] % 10;
 27a:	80 91 78 00 	lds	r24, 0x0078
 27e:	f9 01       	movw	r30, r18
 280:	38 97       	sbiw	r30, 0x08	; 8
 282:	0e 94 67 02 	call	0x4ce	; 0x4ce <__udivmodqi4>
 286:	90 83       	st	Z, r25
 288:	11 82       	std	Z+1, r1	; 0x01
                digits[0] = time_val[2] / 10;
 28a:	f9 01       	movw	r30, r18
 28c:	3a 97       	sbiw	r30, 0x0a	; 10
 28e:	80 83       	st	Z, r24
 290:	11 82       	std	Z+1, r1	; 0x01

                PORTD |= (1 << PD2);
 292:	92 9a       	sbi	0x12, 2	; 18
 294:	08 95       	ret
            }
            break;

        case 2: // запуск секундоміра
            PORTD |= (1 << PD2);
 296:	92 9a       	sbi	0x12, 2	; 18
            time_val[0] = time_val[1] = time_val[2] = 0;
 298:	10 92 78 00 	sts	0x0078, r1
 29c:	10 92 77 00 	sts	0x0077, r1
 2a0:	10 92 76 00 	sts	0x0076, r1
            start = 1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 8a 00 	sts	0x008A, r24
            break;
 2aa:	08 95       	ret

        case 3: // фіксація та перехід до наступного етапу
            PORTD |= (1 << PD2);
 2ac:	92 9a       	sbi	0x12, 2	; 18
            if (setting) {
 2ae:	80 91 60 00 	lds	r24, 0x0060
 2b2:	88 23       	and	r24, r24
 2b4:	09 f1       	breq	.+66     	; 0x2f8 <button+0x154>
                setting_phase++;
 2b6:	80 91 8c 00 	lds	r24, 0x008C
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	80 93 8c 00 	sts	0x008C, r24
                counter = 0;
 2c0:	10 92 89 00 	sts	0x0089, r1
                if (setting_phase > 2) {
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	c0 f0       	brcs	.+48     	; 0x2f8 <button+0x154>
                    setting = 0;
 2c8:	10 92 60 00 	sts	0x0060, r1
                    setting_phase = 0;
 2cc:	10 92 8c 00 	sts	0x008C, r1
                    start = 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 8a 00 	sts	0x008A, r24
 2d6:	08 95       	ret
                }
            }
            break;

        case 4: // вимикання/вмикання індикації
            PORTD |= (1 << PD2);
 2d8:	92 9a       	sbi	0x12, 2	; 18
            off++;
 2da:	80 91 8b 00 	lds	r24, 0x008B
 2de:	8f 5f       	subi	r24, 0xFF	; 255
            if (off % 2 == 1) {
 2e0:	80 ff       	sbrs	r24, 0
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <button+0x150>
                PORTC = 0x00;
 2e4:	15 ba       	out	0x15, r1	; 21
                PORTA = 0x00;
 2e6:	1b ba       	out	0x1b, r1	; 27
                start = 0;
 2e8:	10 92 8a 00 	sts	0x008A, r1
                off = 1;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 8b 00 	sts	0x008B, r24
 2f2:	08 95       	ret
            } else {
                off = 0;
 2f4:	10 92 8b 00 	sts	0x008B, r1
 2f8:	08 95       	ret

000002fa <__vector_14>:
            }
            break;
    }
}

ISR(ADC_vect) {
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
    int result = ADC; 
 31c:	84 b1       	in	r24, 0x04	; 4
 31e:	95 b1       	in	r25, 0x05	; 5
    int old_button = button_number;
 320:	20 91 87 00 	lds	r18, 0x0087
 324:	30 91 88 00 	lds	r19, 0x0088

    if (result >= 790 && result <= 850)
 328:	ac 01       	movw	r20, r24
 32a:	46 51       	subi	r20, 0x16	; 22
 32c:	53 40       	sbci	r21, 0x03	; 3
 32e:	4d 33       	cpi	r20, 0x3D	; 61
 330:	51 05       	cpc	r21, r1
 332:	28 f4       	brcc	.+10     	; 0x33e <__vector_14+0x44>
        button_number = 0;
 334:	10 92 88 00 	sts	0x0088, r1
 338:	10 92 87 00 	sts	0x0087, r1
 33c:	36 c0       	rjmp	.+108    	; 0x3aa <__vector_14+0xb0>
    else if (result >= 0 && result <= 100)
 33e:	85 36       	cpi	r24, 0x65	; 101
 340:	91 05       	cpc	r25, r1
 342:	38 f4       	brcc	.+14     	; 0x352 <__vector_14+0x58>
        button_number = 1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	90 93 88 00 	sts	0x0088, r25
 34c:	80 93 87 00 	sts	0x0087, r24
 350:	2c c0       	rjmp	.+88     	; 0x3aa <__vector_14+0xb0>
    else if (result >= 450 && result <= 550)
 352:	ac 01       	movw	r20, r24
 354:	42 5c       	subi	r20, 0xC2	; 194
 356:	51 40       	sbci	r21, 0x01	; 1
 358:	45 36       	cpi	r20, 0x65	; 101
 35a:	51 05       	cpc	r21, r1
 35c:	38 f4       	brcc	.+14     	; 0x36c <__vector_14+0x72>
        button_number = 2;    
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	90 93 88 00 	sts	0x0088, r25
 366:	80 93 87 00 	sts	0x0087, r24
 36a:	1f c0       	rjmp	.+62     	; 0x3aa <__vector_14+0xb0>
    else if (result >= 650 && result <= 710)
 36c:	ac 01       	movw	r20, r24
 36e:	4a 58       	subi	r20, 0x8A	; 138
 370:	52 40       	sbci	r21, 0x02	; 2
 372:	4d 33       	cpi	r20, 0x3D	; 61
 374:	51 05       	cpc	r21, r1
 376:	38 f4       	brcc	.+14     	; 0x386 <__vector_14+0x8c>
        button_number = 3;
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 88 00 	sts	0x0088, r25
 380:	80 93 87 00 	sts	0x0087, r24
 384:	12 c0       	rjmp	.+36     	; 0x3aa <__vector_14+0xb0>
    else if (result >= 740 && result < 790)
 386:	84 5e       	subi	r24, 0xE4	; 228
 388:	92 40       	sbci	r25, 0x02	; 2
 38a:	82 33       	cpi	r24, 0x32	; 50
 38c:	91 05       	cpc	r25, r1
 38e:	38 f4       	brcc	.+14     	; 0x39e <__vector_14+0xa4>
        button_number = 4;
 390:	84 e0       	ldi	r24, 0x04	; 4
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	90 93 88 00 	sts	0x0088, r25
 398:	80 93 87 00 	sts	0x0087, r24
 39c:	06 c0       	rjmp	.+12     	; 0x3aa <__vector_14+0xb0>
    else
        button_number = -1;
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	9f ef       	ldi	r25, 0xFF	; 255
 3a2:	90 93 88 00 	sts	0x0088, r25
 3a6:	80 93 87 00 	sts	0x0087, r24
	
    if (button_number != old_button && button_number != -1) {
 3aa:	80 91 87 00 	lds	r24, 0x0087
 3ae:	90 91 88 00 	lds	r25, 0x0088
 3b2:	82 17       	cp	r24, r18
 3b4:	93 07       	cpc	r25, r19
 3b6:	31 f0       	breq	.+12     	; 0x3c4 <__vector_14+0xca>
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	8f 3f       	cpi	r24, 0xFF	; 255
 3bc:	92 07       	cpc	r25, r18
 3be:	11 f0       	breq	.+4      	; 0x3c4 <__vector_14+0xca>
        button();
 3c0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <button>
		result = 0;
    }
}
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	7f 91       	pop	r23
 3d2:	6f 91       	pop	r22
 3d4:	5f 91       	pop	r21
 3d6:	4f 91       	pop	r20
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <timer0_init_ctc>:

void timer0_init_ctc() {
    TCCR0 |= (1 << WGM01);          
 3e6:	83 b7       	in	r24, 0x33	; 51
 3e8:	88 60       	ori	r24, 0x08	; 8
 3ea:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1 << CS02);           
 3ec:	83 b7       	in	r24, 0x33	; 51
 3ee:	84 60       	ori	r24, 0x04	; 4
 3f0:	83 bf       	out	0x33, r24	; 51
    OCR0 = 12;                  
 3f2:	8c e0       	ldi	r24, 0x0C	; 12
 3f4:	8c bf       	out	0x3c, r24	; 60
    TIMSK |= (1 << OCIE0); 
 3f6:	89 b7       	in	r24, 0x39	; 57
 3f8:	82 60       	ori	r24, 0x02	; 2
 3fa:	89 bf       	out	0x39, r24	; 57
}
 3fc:	08 95       	ret

000003fe <timer2_init_ctc>:

void timer2_init_ctc() {
    TCCR2 = 0;
 3fe:	15 bc       	out	0x25, r1	; 37
    TCCR2 |= (1 << WGM21); // CTC
 400:	85 b5       	in	r24, 0x25	; 37
 402:	88 60       	ori	r24, 0x08	; 8
 404:	85 bd       	out	0x25, r24	; 37
    OCR2 = 12; 
 406:	8c e0       	ldi	r24, 0x0C	; 12
 408:	83 bd       	out	0x23, r24	; 35
    TIMSK |= (1 << OCIE2);
 40a:	89 b7       	in	r24, 0x39	; 57
 40c:	80 68       	ori	r24, 0x80	; 128
 40e:	89 bf       	out	0x39, r24	; 57
    TCCR2 |= (1 << CS22) | (1 << CS21);
 410:	85 b5       	in	r24, 0x25	; 37
 412:	86 60       	ori	r24, 0x06	; 6
 414:	85 bd       	out	0x25, r24	; 37
}
 416:	08 95       	ret

00000418 <__vector_19>:

ISR(TIMER0_COMP_vect) {
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
    ADCSRA |= (1 << ADSC);
 422:	36 9a       	sbi	0x06, 6	; 6
}
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <__vector_3>:

ISR(TIMER2_COMP_vect) {
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
 438:	2f 93       	push	r18
 43a:	3f 93       	push	r19
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
    PORTA = 0x00;
 444:	1b ba       	out	0x1b, r1	; 27
    PORTC = digit_segments[digits[current_digit]];
 446:	80 91 85 00 	lds	r24, 0x0085
 44a:	90 91 86 00 	lds	r25, 0x0086
 44e:	fc 01       	movw	r30, r24
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	e7 58       	subi	r30, 0x87	; 135
 456:	ff 4f       	sbci	r31, 0xFF	; 255
 458:	01 90       	ld	r0, Z+
 45a:	f0 81       	ld	r31, Z
 45c:	e0 2d       	mov	r30, r0
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	ef 59       	subi	r30, 0x9F	; 159
 464:	ff 4f       	sbci	r31, 0xFF	; 255
 466:	20 81       	ld	r18, Z
 468:	25 bb       	out	0x15, r18	; 21
    PORTA = (1 << current_digit);
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	00 90 85 00 	lds	r0, 0x0085
 472:	02 c0       	rjmp	.+4      	; 0x478 <__stack+0x19>
 474:	22 0f       	add	r18, r18
 476:	33 1f       	adc	r19, r19
 478:	0a 94       	dec	r0
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__stack+0x15>
 47c:	2b bb       	out	0x1b, r18	; 27
    current_digit++;
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 86 00 	sts	0x0086, r25
 484:	80 93 85 00 	sts	0x0085, r24
    if (current_digit >= 6) current_digit = 0;
 488:	86 30       	cpi	r24, 0x06	; 6
 48a:	91 05       	cpc	r25, r1
 48c:	24 f0       	brlt	.+8      	; 0x496 <__stack+0x37>
 48e:	10 92 86 00 	sts	0x0086, r1
 492:	10 92 85 00 	sts	0x0085, r1
}
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <main>:

int main() {
    DDRC = 0b11111111;
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	84 bb       	out	0x14, r24	; 20
    DDRA = 0b00111111;
 4b0:	8f e3       	ldi	r24, 0x3F	; 63
 4b2:	8a bb       	out	0x1a, r24	; 26
    DDRD = 0b00000100;
 4b4:	84 e0       	ldi	r24, 0x04	; 4
 4b6:	81 bb       	out	0x11, r24	; 17
    PORTC = 0x00;
 4b8:	15 ba       	out	0x15, r1	; 21
    PORTA = 0x00;
 4ba:	1b ba       	out	0x1b, r1	; 27

    timer1_init_ctc(); 
 4bc:	0e 94 49 00 	call	0x92	; 0x92 <timer1_init_ctc>
    timer0_init_ctc(); 
 4c0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <timer0_init_ctc>
    timer2_init_ctc(); 
 4c4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <timer2_init_ctc>
    adc_init();
 4c8:	0e 94 c6 00 	call	0x18c	; 0x18c <adc_init>
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <main+0x20>

000004ce <__udivmodqi4>:
 4ce:	99 1b       	sub	r25, r25
 4d0:	79 e0       	ldi	r23, 0x09	; 9
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__udivmodqi4_ep>

000004d4 <__udivmodqi4_loop>:
 4d4:	99 1f       	adc	r25, r25
 4d6:	96 17       	cp	r25, r22
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <__udivmodqi4_ep>
 4da:	96 1b       	sub	r25, r22

000004dc <__udivmodqi4_ep>:
 4dc:	88 1f       	adc	r24, r24
 4de:	7a 95       	dec	r23
 4e0:	c9 f7       	brne	.-14     	; 0x4d4 <__udivmodqi4_loop>
 4e2:	80 95       	com	r24
 4e4:	08 95       	ret

000004e6 <_exit>:
 4e6:	f8 94       	cli

000004e8 <__stop_program>:
 4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <__stop_program>
